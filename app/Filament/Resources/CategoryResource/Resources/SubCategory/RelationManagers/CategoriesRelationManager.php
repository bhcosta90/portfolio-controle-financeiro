<?php

namespace App\Filament\Resources\CategoryResource\Resources\SubCategoryResource\RelationManagers;

use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\RelationManagers\RelationManager;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Model;

class CategoriesRelationManager extends RelationManager
{
    protected static string $relationship = 'categories';

    public static function getTitle(Model $ownerRecord, string $pageClass): string
    {
        return __('Sub categoria de: :name', ['name' => $ownerRecord->name]);
    }

    protected static function getRecordLabel(): ?string
    {
        return __('sub categoria'); // TODO: Change the autogenerated stub
    }

    public function form(Form $form): Form
    {
        $id = $form->model->id ?? null;
        $category = $form->getLivewire()->ownerRecord->id;
        $tenant = tenant('id');

        return $form
            ->schema([
                Forms\Components\TextInput::make('name')
                    ->label(__('Nome'))
                    ->required()
                    ->rules([
                        'min:3',
                        'max:100',
                        "unique:categories,name,{$id},id,tenant_id,{$tenant},category_id,{$category},deleted_at,NULL"
                    ])
                    ->columnSpanFull()
            ]);
    }

    public function table(Table $table): Table
    {
        return $table
            ->recordTitleAttribute('name')
            ->columns([
                Tables\Columns\TextColumn::make('name'),
            ])
            ->filters([
                //
            ])
            ->headerActions([
                Tables\Actions\CreateAction::make(),
                Tables\Actions\AssociateAction::make(),
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
                Tables\Actions\DeleteAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ])
            ->emptyStateActions([
                Tables\Actions\CreateAction::make(),
                Tables\Actions\AssociateAction::make(),
            ])->defaultSort('name')->persistSortInSession();
    }
}
