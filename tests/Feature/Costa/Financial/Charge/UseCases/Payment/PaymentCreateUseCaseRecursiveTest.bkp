<?php

namespace Tests\Feature\Costa\Financeiro\Charge\UseCases\Payment;

use App\Models\Account;
use App\Models\Charge;
use App\Models\Recurrence;
use App\Models\Relationship;
use App\Models\Tenant;
use App\Models\User;
use Costa\Financeiro\Charge\Exceptions\PaymentException;
use Costa\Financeiro\Charge\UseCases\Payment\DTO\Create\Input as CreateInput;
use Costa\Financeiro\Charge\UseCases\Payment\DTO\Pay\Input as PayInput;
use Costa\Financeiro\Charge\UseCases\Payment\DTO\Find\Input as FindInput;
use Costa\Financeiro\Charge\UseCases\Payment\PaymentCreateUseCase;
use Costa\Financeiro\Charge\UseCases\Payment\PaymentPayUseCase;
use Costa\Financeiro\Charge\UseCases\Payment\PaymentDeleteUseCase;
use DateTime;
use Illuminate\Support\Facades\Auth;
use stdClass;
use Tests\TestCase;

class PaymentCreateUseCaseRecursiveTest extends TestCase
{
    public function testPaymentRecursiveCharge()
    {
        $data = $this->getDefaultData();

        /** @var PaymentCreateUseCase */
        $useCase = app(PaymentCreateUseCase::class);
        $useCase->exec(new CreateInput(
            charge: $data->charge->uuid,
            scheduled: false,
            bankAccount: false,
            valueCharge: 50,
            valueTransaction: 50,
            valuePayment: 50,
            dateScheduled: null,
        ));

        $this->assertDatabaseCount('charges', 2);
        $this->assertDatabaseHas('charges', [
            'id' => 1,
            'date_due' => '2022-01-08',
            'value_pay' => 50,
            'status' => 3,
        ]);

        $this->assertDatabaseHas('charges', [
            'id' => 2,
            'date_due' => '2022-01-18',
            'value_pay' => null,
            'status' => 1,
        ]);
    }
    protected function getDefaultData()
    {
        $class = new stdClass;

        Auth::login($user = User::factory()->create());
        $recurrence = Recurrence::factory()->create(['days' => 10, 'tenant_id' => $user->tenant_id]);
        $objCharge = Charge::factory()->create(['value_charge' => 50, 'recurrence_id' => $recurrence->id, 'date_due' => '2022-01-08']);
        $idRelation = Relationship::where('id', $objCharge->relationship_id)->first()->uuid;
        $idTenant = Tenant::where('id', $user->tenant_id)->first()->uuid;

        Account::factory()->create([
            'value' => 0,
            'model_id' => $idRelation,
        ]);

        $class->charge = $objCharge;
        $class->relation = $idRelation;
        $class->tenant = $idTenant;
        return $class;
    }
}
